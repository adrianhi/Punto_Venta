using DevExpress.Internal.WinApi.Windows.UI.Notifications;
using DevExpress.XtraGrid.Views.Grid;
using Punto_Venta.Controllers;
using Punto_Venta.Model.EF;
using System;
using System.Windows.Forms;
using System.Data.Entity;
using System.Collections.Generic;
using System.Linq;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors;
using System.Data;
using DevExpress.Utils.About;

namespace Punto_Venta.View
{
    public partial class FrmProductList : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        private readonly ProductController productController;

        [Obsolete]
        public FrmProductList ( )
        {
            InitializeComponent();
            productController = new ProductController();
            btnActualizar.Enabled = false;
            btnEliminar.Enabled = false;
            SetTextBoxState(false);
            gridViewProducts.FocusedRowChanged -= gridViewProducts_FocusedRowChanged;
            gridViewProducts.FocusedRowChanged += gridViewProducts_FocusedRowChanged;
            LoadData();
            cmbEstado.Items.Add("No disponible");
            cmbEstado.Items.Add("Disponible");

          
        }

        /// <summary>
        /// Funciones de la vista
        /// </summary>
        private void SetTextBoxState (bool state)
        {
            txtCodigoProducto.Enabled = state;
            txtNombreProducto.Enabled = state;
            txtPrecioCompra.Enabled = state;
            txtPrecioVenta.Enabled = state;
            cmbEstado.Enabled = state;
            txtExistencia.Enabled = state;
            txtStock.Enabled = state;
            lkCategories.Enabled = state;
        }


        private int getCurrentRowId ( )
        {
            int rowIndex = gridViewProducts.FocusedRowHandle;

            int productId = Convert.ToInt32(gridViewProducts.GetRowCellValue(rowIndex, "Id_producto"));
            return productId;
        }
        private void LoadData ( )
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Punto_Venta.Model.EF.Punto_ventasEntities dbContext = new Punto_Venta.Model.EF.Punto_ventasEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Productos.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControlProducts.DataSource = dbContext.Productos.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

            ClearTextBox();


        }
        private void ClearTextBox ( )
        {
            txtCodigoProducto.Text = "";
            txtNombreProducto.Text = "";
            txtPrecioCompra.Text = "";
            txtPrecioVenta.Text = "";
            cmbEstado.Text = "";
            txtExistencia.Text = "";
            txtStock.Text = "";
            lkCategories.Text = "";
            btnAgregar.Enabled = true;
            btnAgregar.Text = "Agregar";
            btnActualizar.Enabled = false;
            btnEliminar.Enabled = false;
            lkCategories.EditValue = null;
            SetTextBoxState(false);
        }
        private void FillTextBox (Producto selectedProduct)
        {
            txtCodigoProducto.Text = selectedProduct.Codigo;
            txtNombreProducto.Text = selectedProduct.Nombre;
            txtPrecioCompra.Text = selectedProduct.Precio_compra.ToString();
            txtPrecioVenta.Text = selectedProduct.Precio_venta.ToString();
            cmbEstado.Text = selectedProduct.Estado;
            txtExistencia.Text = selectedProduct.Existencia.ToString();
            txtStock.Text = selectedProduct.Stock.ToString();
            lkCategories.EditValue = selectedProduct.Id_categoria;
        }

        private void productExist (int productId )
        {
            if (!productController.ProductExist(productId))
            {
                MessageBox.Show("El producto con el ID " + productId + " no existe.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
        }




        //CRUD ACTIONS
        private void AddProduct ( )
        {
            try
            {
                Producto nuevoProducto = new Producto
                {
                    Codigo = txtCodigoProducto.Text,
                    Nombre = txtNombreProducto.Text,
                    Precio_compra = Convert.ToDecimal(txtPrecioCompra.Text),
                    Precio_venta = Convert.ToDecimal(txtPrecioVenta.Text),
                    Estado = cmbEstado.SelectedItem.ToString(),
                    Existencia = Convert.ToInt32(txtExistencia.Text),
                    Stock = Convert.ToInt32(txtStock.Text),
                    Id_categoria = Convert.ToInt32(lkCategories.EditValue)
                };

                productController.AddProduct(nuevoProducto);
                LoadData();
                ClearTextBox();
            }
         
            catch (Exception ex)
            {
                MessageBox.Show("Error " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void DeleteProduct ( )
        {
            try
            {
                int productId = getCurrentRowId();
                DialogResult result = MessageBox.Show("¿Estás seguro de que deseas eliminar el producto con el id " + productId + "?", "Confirmar eliminación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    productExist(productId);
                    productController.DeleteProduct(productId);
                    MessageBox.Show("Producto con el id " + productId + " eliminado correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    LoadData();
                    ClearTextBox();
                }
                ClearTextBox();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        private void UpdateProduct ( )
        {

            try
            {
                int productId = getCurrentRowId();
                string codigoProducto = txtCodigoProducto.Text;
                string nuevoNombre = txtNombreProducto.Text;
                decimal nuevoPrecioCompra = Convert.ToDecimal(txtPrecioCompra.Text);
                decimal nuevoPrecioVenta = Convert.ToDecimal(txtPrecioVenta.Text);
                string nuevoEstado = cmbEstado.SelectedItem.ToString();
                int nuevaExistencia = Convert.ToInt32(txtExistencia.Text);
                int nuevoStock = Convert.ToInt32(txtStock.Text);
                int nuevoIdCategoria = Convert.ToInt32(lkCategories.EditValue);

                DialogResult result = MessageBox.Show("¿Estás seguro de que deseas actualizar el producto con el código " + codigoProducto + "?", "Confirmar actualizacion", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (result == DialogResult.Yes)
                {
                    productExist(productId);

                    productController.UpdateProduct(productId, codigoProducto, nuevoNombre, nuevoPrecioCompra, nuevoPrecioVenta, nuevoEstado, nuevaExistencia, nuevoStock, nuevoIdCategoria);

                    MessageBox.Show("Producto con el id " + productId + " actualizado correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    ClearTextBox();
                    LoadData();
                }

                ClearTextBox();
            }
           
            catch (Exception ex)
            {
                MessageBox.Show("Error al actualizar producto " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }



        }


        //Acciones
        private void txtLimpiar_Click (object sender, EventArgs e)
        {
            ClearTextBox();
        }

        private void btnAgregar_Click (object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show(
                  "¿Desea agregar un nuevo producto?",
                  "Confirmar creación",
                  MessageBoxButtons.YesNo,
                  MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                if (btnAgregar.Text == "Agregar")
                {
                    SetTextBoxState(true);
                    btnAgregar.Text = "Guardar";

                  
                }
                else if (btnAgregar.Text == "Guardar")
                {
                    AddProduct();
                    btnAgregar.Text = "Agregar";

                }
            }
        }

        private void btnEliminar_Click (object sender, EventArgs e)
        {
            DeleteProduct();
        }
        private void btnActualizar_Click (object sender, EventArgs e)
        {
            UpdateProduct();
        }


        private void gridViewProducts_FocusedRowChanged (object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (sender is GridView gridView && gridView.FocusedRowHandle >= 0)
            {
                if (gridView.GetRow(e.FocusedRowHandle) is Producto selectedProduct)
                {
                    FillTextBox(selectedProduct);
                    SetTextBoxState(true);
                    btnAgregar.Text = "Agregar";
                    btnAgregar.Enabled = false;
                    btnActualizar.Enabled = true;
                    btnEliminar.Enabled = true;
                   
                }
            }
        }

        private void productoBindingSource_CurrentChanged (object sender, EventArgs e)
        {

        }

        private void FrmProductList_Load (object sender, EventArgs e)
        {
            // TODO: esta línea de código carga datos en la tabla 'punto_ventasDataSet.Categoria_productos' Puede moverla o quitarla según sea necesario.
            this.categoria_productosTableAdapter.Fill(this.punto_ventasDataSet.Categoria_productos);

        }
    }
}