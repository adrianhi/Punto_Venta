using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using Punto_Venta.Controllers;
using Punto_Venta.Model.EF;
using System;
using System.Linq;
using System.Runtime.Remoting.Contexts;
using System.Windows.Forms;
using System.Data.Entity;

namespace Punto_Venta.View
{
    public partial class FrmCxC : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        private readonly CxcController cxcController;
        public FrmCxC ( )
        {
            InitializeComponent();
            cxcController = new CxcController();
            LoadData();
            CleanTextBox();


        }
        private void LoadData ( )
        {

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Punto_Venta.Model.EF.Punto_ventasEntities dbContext = new Punto_Venta.Model.EF.Punto_ventasEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Maestro_ctasxcobrar.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gcCuentas.DataSource = dbContext.Maestro_ctasxcobrar.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }


      

        private void FillTextBox (Maestro_ctasxcobrar selectedCxC)
        {
            txtIdCxC.Text = selectedCxC.Id_CxC.ToString();
            txtIdVenta.Text = selectedCxC.Id_venta.ToString();
            txtIdCliente.Text = selectedCxC.Id_Cliente.ToString();
            txtTransaccionId.Text = selectedCxC.Id_Transaccion.ToString();
            txtMontoFinal.Text = selectedCxC.Monto_total.ToString();
            txtTipoTransaccion.Text = selectedCxC.Id_TipoTransaccion.ToString();
            txtBalance.Text = selectedCxC.Balance.ToString();
            txtMontoRecibido.Text = selectedCxC.Monto_recibido.ToString();
             }
       private void btnClear_Click (object sender, EventArgs e)
        {
            CleanTextBox();
        }
        private void CleanTextBox ( )
        {
            txtIdCxC.Text = string.Empty;
            txtIdVenta.Text = string.Empty;
            txtIdCliente.Text = string.Empty;
            txtTransaccionId.Text = string.Empty;
            txtTipoTransaccion.Text = string.Empty;
            txtBalance.Text = string.Empty;
            txtMontoRecibido.Text = string.Empty;
            
            txtMontoFinal.Text = string.Empty;
        }

        private void txtMontoAbornar_KeyPress (object sender, KeyPressEventArgs e) => ValidateNumericInput(txtMontoAbornar, e);
        private void ValidateNumericInput (TextEdit textBox, KeyPressEventArgs e)
        {
            // Permitir solo números, punto decimal y tecla retroceso.
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && (e.KeyChar != '.'))
            {
                e.Handled = true;
                return;
            }

            // Si ya hay un punto decimal, no permitir otro.
            if (e.KeyChar == '.' && textBox.Text.Contains('.'))
            {
                e.Handled = true;
                return;
            }

            // Si se ha introducido el número máximo de caracteres, no permitir más.
            if (textBox.Text.Length >= 10 && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;
                return;
            }

            // Si el cursor está al principio, no permitir un punto decimal.
            if (textBox.SelectionStart == 0 && e.KeyChar == '.')
            {
                e.Handled = true;
                return;
            }
        }

        private bool ValidateInput (out decimal montoAbonado, out DateTime fechaAbono, out int idCxC)
        {
            montoAbonado = 0;
            fechaAbono = DateTime.MinValue;
            idCxC = 0;

            // Validar que se haya ingresado un monto abonado válido
            if (!decimal.TryParse(txtMontoAbornar.Text, out montoAbonado) || montoAbonado <= 0)
            {
                XtraMessageBox.Show("Ingrese un monto abonado válido.", "Error de validación", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            // Validar que se haya seleccionado una fecha de abono
            if (dtAbono.EditValue == null)
            {
                XtraMessageBox.Show("Seleccione una fecha de abono.", "Error de validación", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            fechaAbono = dtAbono.DateTime;

            // Obtener el idCxC desde el cuadro de texto
            if (!int.TryParse(txtIdCxC.Text, out idCxC) || idCxC <= 0)
            {
                XtraMessageBox.Show("Ingrese un ID de cuenta por cobrar válido.", "Error de validación", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            return true;
        }

        private void txtActualizar_Click (object sender, EventArgs e)
        {
            decimal montoAbonado;
            DateTime fechaAbono;
            int idCxC;

            // Realizar validaciones
            if (!ValidateInput(out montoAbonado, out fechaAbono, out idCxC))
            {
                return; // Si las validaciones fallan, salir del método
            }

            // Insertar los detalles de la cuenta por cobrar
            if (cxcController.InsertarDetallesCXC(idCxC, montoAbonado, fechaAbono))
            {
                // Cargar los datos después de terminar el proceso
                LoadData();
                CleanTextBox();
               
            }
           
        }


       

        private void gvCuentas_FocusedRowChanged (object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (sender is GridView gridView && gridView.FocusedRowHandle >= 0)
            {
                if (gridView.GetRow(e.FocusedRowHandle) is Maestro_ctasxcobrar selectedCxC)
                {
                    FillTextBox(selectedCxC);

                }
            }
        }
    }
}
    

