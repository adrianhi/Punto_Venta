using Punto_Venta.Controllers;
using Punto_Venta.Model.EF;
using System;
using System.Windows.Forms;
using System.Data.Entity;

namespace Punto_Venta.View
{
    public partial class FrmCategoryList : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        private readonly CategoryController productCategoryController;
        private BindingSource categoriesBindingSource = new BindingSource();

        public FrmCategoryList ( )
        {
            InitializeComponent();
            productCategoryController = new CategoryController();
            gridViewCategories.FocusedRowChanged -= gridViewCategories_FocusedRowChanged;
            gridViewCategories.FocusedRowChanged += gridViewCategories_FocusedRowChanged;
            LoadCategories();
            btnActualizar.Enabled = false;
            btnEliminar.Enabled = false;
            SetTextBoxState(false);

          
        }

        private void LoadCategories ( )
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Punto_Venta.Model.EF.Punto_ventasEntities dbContext = new Punto_Venta.Model.EF.Punto_ventasEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Categoria_productos.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.Categoria_productos.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            ClearTextBox();
        }
        private void ClearTextBox ( )
        {
            txtIdCategoria.Text = "";
            txtNombreCategoria.Text = "";
            rtxtDescripcion.Text = "";
            btnAgregar.Enabled = true;
            btnActualizar.Enabled = false;
            btnEliminar.Enabled = false;
            SetTextBoxState(false);
        }
        private void FillCategoryTextBox (Categoria_productos selectedCategory)
        {
            txtIdCategoria.Text = selectedCategory.Id_categoria.ToString();
            txtNombreCategoria.Text = selectedCategory.Nombre_categoria;
            rtxtDescripcion.Text = selectedCategory.Descripcion;
        }

        private void SetTextBoxState (bool state)
        {
            txtIdCategoria.Enabled = state;
            txtNombreCategoria.Enabled = state;
            rtxtDescripcion.Enabled = state;
        }


        //CRUD

        private void AddCategory ( )
        {
            Categoria_productos nuevaCategoria = new Categoria_productos
            {
                Id_categoria = int.Parse(txtIdCategoria.Text),
                Nombre_categoria = txtNombreCategoria.Text,
                Descripcion = rtxtDescripcion.Text
            };
            productCategoryController.AddCategory(nuevaCategoria);
            LoadCategories();
            SetTextBoxState(false);

        }
        private void DeleteCategory ( )
        {
            int idCategoriaEliminar;
            if (!int.TryParse(txtIdCategoria.Text, out idCategoriaEliminar))
            {
                MessageBox.Show("Por favor, ingrese un ID de categoría válido", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            if (!productCategoryController.CategoryExists(idCategoriaEliminar))
            {
                MessageBox.Show("La categoría con el ID " + idCategoriaEliminar + " no existe", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            Categoria_productos categoriaAEliminar = productCategoryController.GetCategoryById(idCategoriaEliminar);
            if (categoriaAEliminar == null)
            {
                MessageBox.Show("La categoría con el ID " + idCategoriaEliminar + " no existe", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            DialogResult result = MessageBox.Show("¿Estás seguro de que deseas eliminar la categoría con el ID " + idCategoriaEliminar + "?", "Confirmar eliminación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result == DialogResult.Yes)
            {
                productCategoryController.DeleteCategory(categoriaAEliminar);
                MessageBox.Show("Categoría con el ID " + idCategoriaEliminar + " eliminada correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
                LoadCategories();

            }
        }
        private void UpdateCategory ( )
        {
            int idCategoria;
            if (!int.TryParse(txtIdCategoria.Text.Trim(), out idCategoria))
            {
                MessageBox.Show("Por favor, ingrese un ID de categoría válido", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            string nuevoNombre = txtNombreCategoria.Text.Trim();
            string nuevaDescripcion = rtxtDescripcion.Text.Trim();

            productCategoryController.updateCategory(idCategoria, nuevoNombre, nuevaDescripcion);

            DialogResult result = MessageBox.Show("¿Estás seguro de que deseas actualizar la categoría con el ID " + idCategoria + "?", "Confirmar eliminación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result == DialogResult.Yes)
            {
                MessageBox.Show("Categoría con el ID " + idCategoria + " Actualizada correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
                MessageBox.Show("Categoría actualizada correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }

            LoadCategories();
        }


        private void btnLimpiar_Click (object sender, EventArgs e)
        {
            ClearTextBox();
        }

        private void btnAgregar_Click (object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show(
                   "¿Desea agregar una nueva categoría?",
                   "Confirmar creación",
                   MessageBoxButtons.YesNo,
                   MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                if (btnAgregar.Text=="Agregar")
                {
                    // Habilitar campos para ingresar información
                    SetTextBoxState(true);

                    // Cambiar el texto del botón a "Guardar"
                    btnAgregar.Text = "Guardar";
                }
                else if (btnAgregar.Text == "Guardar")
                {
                    // Agregar categoría al hacer clic en "Guardar" después de completar los campos
                    AddCategory();
                    btnAgregar.Text = "Agregar";
                }
            }
           
        }

        private void btnEliminar_Click (object sender, EventArgs e)
        {
            DeleteCategory();
        }

        private void gridViewCategories_FocusedRowChanged (object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (sender is DevExpress.XtraGrid.Views.Grid.GridView gridView && gridView.FocusedRowHandle >= 0)
            {
                if (gridView.GetRow(e.FocusedRowHandle) is Categoria_productos selectedCategory)
                {
                    FillCategoryTextBox(selectedCategory);
                    SetTextBoxState(true);
                    btnAgregar.Enabled = false;
                    btnActualizar.Enabled = true;
                    btnEliminar.Enabled = true;
                }
            }

        }

        private void btnActualizar_Click (object sender, EventArgs e)
        {
            UpdateCategory();
        }

       
    }
}