using DevExpress.XtraBars;
using Punto_Venta.Controller;
using Punto_Venta.Model.EF;
using System;
using System.Linq;
using System.Windows.Forms;
using System.Data.Entity;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.Utils.About;

namespace Punto_Venta.View
{
    public partial class FrmClientList : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        private readonly ClientController clientController;

        public FrmClientList ( )
        {
            InitializeComponent();
            txtIdCliente.Select();
            Cursor.Current = Cursors.WaitCursor;
            clientController = new ClientController();
            txtIdCliente.Enabled= false;
            SetTextBoxState(false);
            gridViewClients.FocusedRowChanged -= gridViewClients_FocusedRowChanged;
            gridViewClients.FocusedRowChanged += gridViewClients_FocusedRowChanged;
            btnAgregar.Enabled = false;
            LoadData();



        }


        /// <summary>
        /// Funciones de la vista
        /// </summary>
        private void SetTextBoxState (bool state)
        {
            txtNombreCliente.Enabled = state;
            txtCedula.Enabled = state;
            txtDireccion.Enabled = state;
            txtTelefono.Enabled = state;
            txtCorreo.Enabled = state;
        }
        private int getCurrentRowId ( )
        {
            int rowIndex = gridViewClients.FocusedRowHandle;

            int ClientId = Convert.ToInt32(gridViewClients.GetRowCellValue(rowIndex, "idCliente"));
            return ClientId;
        }
        private void LoadData ( )
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Punto_Venta.Model.EF.Punto_ventasEntities dbContext = new Punto_Venta.Model.EF.Punto_ventasEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Maestro_Clientes.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControlClients.DataSource = dbContext.Maestro_Clientes.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void ClearTextBox ( )
        {
            txtIdCliente.Text = "";
            txtNombreCliente.Text = "";
            txtDireccion.Text = "";
            txtTelefono.Text = "";
            txtCorreo.Text = "";
            txtCedula.Text = "";
            btnAgregar.Enabled = true;
            btnAgregar.Text = "Agregar";
            btnActualizar.Enabled = false;
            btnEliminar.Enabled = false;
            SetTextBoxState(false);
        }

        private void EmailValidation ( )
        {
            string email = txtCorreo.Text;

            string pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";

            bool isValid = System.Text.RegularExpressions.Regex.IsMatch(email, pattern);

            btnAgregar.Enabled = isValid;

            txtCorreo.ForeColor = isValid ? System.Drawing.Color.Black : System.Drawing.Color.Red;
        }

        private void FillTextBox (Maestro_Clientes selectedClient)
        {
            txtIdCliente.Text = selectedClient.idCliente.ToString();
            txtNombreCliente.Text = selectedClient.nombre;
            txtCedula.Text = selectedClient.cedula;
            txtDireccion.Text = selectedClient.direccion;
            txtTelefono.Text = selectedClient.telefono;
            txtCorreo.Text = selectedClient.correo;
        }
        
        private void clientExists(int ClientId)
        {
            if (!clientController.ClientExists(ClientId))
            {
                MessageBox.Show("El cliente con el ID " + ClientId + " no existe.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
        }


        //CRUD
        private void AddClient ( )
        {
            Maestro_Clientes newClient = new Maestro_Clientes    
            {
                idCliente=Convert.ToInt32 (txtIdCliente.Text),
                cedula=txtCedula.Text,
                nombre = txtNombreCliente.Text,
                direccion = txtDireccion.Text,
                telefono = txtTelefono.Text,
                correo = txtCorreo.Text
            };

            clientController.AddClient(newClient);
            ClearTextBox();
            LoadData();
        
        }

        private void DeleteClient ( )
        {
            int ClientId = getCurrentRowId();
           

            DialogResult result = MessageBox.Show("¿Estás seguro de que deseas eliminar el cliente con el ID " + ClientId + "?", "Confirmar eliminación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                clientExists(ClientId);
                clientController.DeleteClient(ClientId);
                MessageBox.Show("Cliente con el ID " + ClientId + " eliminado correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
                ClearTextBox();
                LoadData();
            }
        }


        private void UpdateClient ( )
        {
                int idCliente = int.Parse(txtIdCliente.Text);
                string nombre = txtNombreCliente.Text.Trim();
                string direccion = txtDireccion.Text.Trim();
                string telefono = txtTelefono.Text.Trim();
                string correoElectronico = txtCorreo.Text.Trim();

                DialogResult result = MessageBox.Show("¿Estás seguro de que deseas actualizar el cliente con el id " + idCliente + "?", "Confirmar actualización", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (result == DialogResult.Yes)
                {

                clientExists(idCliente);

                clientController.UpdateClient(idCliente, correoElectronico, nombre, direccion, telefono);
                    MessageBox.Show("Cliente actualizado correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    ClearTextBox();
                    LoadData();
                }
            
            else
            {
                MessageBox.Show("Por favor, seleccione un cliente válido para actualizar", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }



        //Acciones
        private void btnEliminar_Click (object sender, EventArgs e)
        {
            DeleteClient();
        }

        private void btnActualizar_Click (object sender, EventArgs e)
        {
            UpdateClient();
        }

        private void btnAgregar_Click (object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show(
              "¿Desea agregar un nuevo Cliente?",
              "Confirmar creación",
              MessageBoxButtons.YesNo,
              MessageBoxIcon.Question);
            if (result == DialogResult.Yes)
            {
                if (btnAgregar.Text == "Agregar")
                {
                    txtIdCliente.Enabled = true;
                    SetTextBoxState(true);
                    btnAgregar.Text = "Guardar";


                }
                else if (btnAgregar.Text == "Guardar")
                {
                    AddClient();
                    btnAgregar.Text = "Agregar";

                }
            }
        }

        private void btnLimpiar_Click (object sender, EventArgs e)
        {
            ClearTextBox();
        }

        private void gridViewClients_FocusedRowChanged (object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (sender is GridView gridView && gridView.FocusedRowHandle >= 0)
            {
                if (gridView.GetRow(e.FocusedRowHandle) is Maestro_Clientes selectedClient)
                {
                    FillTextBox(selectedClient);
                    SetTextBoxState(true);
                    btnAgregar.Text = "Agregar";
                    btnAgregar.Enabled = false;
                    btnActualizar.Enabled = true;
                    btnEliminar.Enabled = true;
                }
            }
        }

        private void textEdit1_TextChanged (object sender, EventArgs e)
        {
            EmailValidation();
        }
    }
}
